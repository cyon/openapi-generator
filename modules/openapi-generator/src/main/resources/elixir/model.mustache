{{>licenseInfo}}
{{#models}}{{#model}}defmodule {{moduleName}}.Model.{{classname}} do
  @moduledoc """
  {{description}}
  """

  @derive [Jason.Encoder]
  defstruct [
    {{#vars}}:"{{baseName}}"{{#hasMore}},
    {{/hasMore}}{{/vars}}
  ]

  @type t :: %__MODULE__{
    {{#vars}}:"{{baseName}}" => {{{datatype}}}{{#isNullable}} | nil{{/isNullable}}{{^isNullable}}{{^required}} | nil{{/required}}{{/isNullable}}{{#hasMore}},
    {{/hasMore}}{{/vars}}
  }
end

{{#hasComplexVars}}
defimpl {{moduleName}}.Deserializer.Decoder, for: {{moduleName}}.Model.{{classname}} do
  alias {{moduleName}}.Deserializer

  def decode(object, values) do
    %{
    {{#vars}}
    {{^isPrimitiveType}}
      {{#datatype}}{{baseName}}: &Deserializer.decode(&1, {{#isListContainer}}[%{{moduleName}}.Model.{{items.datatype}}{}]{{/isListContainer}}{{#isMapContainer}}%{}{{/isMapContainer}}{{#isDate}}:date{{/isDate}}{{#isDateTime}}:date{{/isDateTime}}{{^isDate}}{{^isDateTime}}{{^isMapContainer}}{{^isListContainer}}%{{moduleName}}.Model.{{dataType}}{}{{/isListContainer}}{{/isMapContainer}}{{/isDateTime}}{{/isDate}}){{#hasMore}},{{/hasMore}}
    {{/datatype}}
    {{/isPrimitiveType}}
    {{/vars}}
    }
    |> {{moduleName}}.Deserializer.map_by_mapping(values, object)
  end
end
{{/hasComplexVars}}
{{/model}}{{/models}}
